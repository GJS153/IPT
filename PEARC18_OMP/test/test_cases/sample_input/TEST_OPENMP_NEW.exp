#!/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Jun 25 17:19:06 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ../IPT serial_version/test_openmp.c
match_max 100000
expect -exact "\r
NOTE: We currently support only C and C++ programs.\r
\r
Please select a parallel programming model from the following available options:  \r
1. MPI\r
2. OpenMP\r
3. CUDA \r
"
send -- "2\r"
expect -exact "2\r
A list containing the functions in the input file will be presented, and you may want to select one function at a time to parallelize it using multi-threading.\r
Please choose the function that you want to parallelize from the list below\r
1 : initialize_array_randomly\r
2 : initialize_array_sequentialy\r
3 : initialize_array_to_zero\r
4 : checksum\r
5 : compute_energy_for_elems\r
6 : compute_temporary_solution\r
7 : luleshmk\r
8 : main\r
"
send -- "6\r"
expect -exact "6\r
Please select one of the following options (enter 1 or 2 or 3) \r
1. Create a parallel region (a group of threads will be created and each thread will execute a block of code redundantly but in parallel) \r
2. Parallelize a for-loop (a group of threads will be created and each thread will execute a certain number of iterations of a for-loop)\r
3. Create a parallel section (TBD - this mode is currently unavailable)\r
"
send -- "2\r"
expect -exact "2\r
Loop\r
\r
for (int nver = 0; nver < nvertices; nver++) {\r
  T\[nver\] = energy\[nver\];\r
}\r
Is this the for loop you are looking for?(y/n) \r
"
send -- "n\r"
expect -exact "n\r
\r
OK - will find the next loop if available.\r
Note: With your response, you will be selecting or declining the parallelization of the outermost for-loop in the code region shown below. If instead of the outermost for-loop, there are any inner for-loops in this code region that you are interested in parallelizing, then, you will be able to select those at a later stage.\r
\r
for (int nel = 0; nel < nelems; nel++) {\r
  double elem_contribution = 0;\r
  for (int nver = 1; nver < nvertices - 1; nver++) {\r
    double T1 = 0;\r
    for (int order = 0; order < 10; order++) {\r
      float pi = (2.0f * asin(1.0f));\r
      double tmp = sin((pi * nver / (nvertices - 1)));\r
      T1 += tmp * exp((-pi));\r
    }\r
    if (T1 < 1) {\r
      elem_contribution += 0;\r
    }\r
     else {\r
      double T0 = A_old\[nver - 1\] + A_old\[nver\] + A_old\[nver + 1\];\r
      elem_contribution += 0.33f * T0;\r
    }\r
  }\r
  T\[nodes\[nel\]\] += elem_contribution * 0.0000001f;\r
}\r
Is this the for loop you are looking for?(y/n) \r
"
send -- "y\r"
expect -exact "y\r
Do you want to perform reduction on any variable ?(Y/N)\r
"
send -- "n\r"
expect -exact "n\r
WAPIS\r
size is : 28\r
\r
IPT is unable to perform the dependency analysis of the array named \[ T \] in the region of code that you wish to parallelize.\r
Please enter 1 if the entire array is being updated in a single iteration of the loop that you selected for parallelization, or, enter 2 otherwise.\r
"
send -- "2\r"
expect -exact "2\r
Warning: attachArbitraryText(): attaching arbitrary text to the AST as a #if declaration: text = { \r
Are there any lines of code that you would like to run either using a single thread at a time (hence, one thread after another), or using only one thread?(Y/N)\r
"
send -- "y\r"
expect -exact "y\r
Please select from one of the following options:\r
1. Execute the entire code region using one thread\r
2. Execute the code region with multiple threads, but let only one thread run at a time\r
"
send -- "2\r"
expect -exact "2\r
\r
For your convenience we have generated a file called numberedCode.C with line numbers corresponding to each line of your code. You can chose to show this file here or open this file in a different terminal.\r
Do you want to show the file ? (Y/N)\r
"
send -- "y\r"
expect -exact "y\r
0 : for ( int nver = 0;;;nver < nvertices;;nver++) {\r
1 : 	T\[nver\] = energy\[nver\];\r
2 : } \r
3 : {\r
4 : 	#pragma omp parallel default(none) shared(nelems,A_old,T,nodes,nvertices)\r
5 : 	for ( int nel = 0;;;nel < nelems;;nel++) {\r
6 : 		double elem_contribution = 0;\r
7 : 		for ( int nver = 1;;;nver < nvertices - 1;;nver++) {\r
8 : 			double T1 = 0;\r
9 : 			for ( int order = 0;;;order < 10;;order++) {\r
10 : 				float pi =(2.0f * asin(1.0f));\r
11 : 				double tmp = sin((pi * nver /(nvertices - 1)));\r
12 : 				T1 += tmp * exp((-pi));\r
13 : 			} \r
14 : 			if (T1 < 1;) {\r
15 : 				elem_contribution += 0;\r
16 : 			}\r
17 : 			else {\r
18 : 				double T0 = A_old\[nver - 1\] + A_old\[nver\] + A_old\[nver + 1\];\r
19 : 				elem_contribution += 0.33f * T0;\r
20 : 			}\r
21 : 		} \r
22 : 		T\[nodes\[nel\]\] += elem_contribution * 0.0000001f;\r
23 : 	} \r
24 :  }\r
Select the line numbers from the NumberCode.txt file in which you want to perform the operation, and enter the line numbers here (format:\[a\],\[a-b\],\[a,b\]).\r
"
send -- "22\r"
expect -exact "22\r
Warning: attachArbitraryText(): attaching arbitrary text to the AST as a #if declaration: text = { \r
Warning: attachArbitraryText(): attaching arbitrary text to the AST as a #if declaration: text = } \r
Warning: attachArbitraryText(): attaching arbitrary text to the AST as a #if declaration: text = } \r
\r
Would you like to parallelize another loop?(Y/N)\r
"
send -- "y\r"
expect -exact "y\r
Please choose the function that you want to parallelize from the list below\r
1 : initialize_array_randomly\r
2 : initialize_array_sequentialy\r
3 : initialize_array_to_zero\r
4 : checksum\r
5 : compute_energy_for_elems\r
6 : compute_temporary_solution\r
7 : luleshmk\r
8 : main\r
"
send -- "2\r"
expect -exact "2\r
\r
for (int i = 0; i < n; i++) {\r
  mat\[i\] = i;\r
}\r
Is this the for loop you are looking for?(y/n) \r
"
send -- "y\r"
expect -exact "y\r
Do you want to perform reduction on any variable ?(Y/N)\r
"
send -- "y"
expect -exact " "
send -- "y"
expect -exact " "
send -- "n\r"
expect -exact "n\r
WAPIS\r
size is : 6\r
\r
IPT is unable to perform the dependency analysis of the array named \[ mat \] in the region of code that you wish to parallelize.\r
Please enter 1 if the entire array is being updated in a single iteration of the loop that you selected for parallelization, or, enter 2 otherwise.\r
"
send -- "2\r"
expect -exact "2\r
Warning: attachArbitraryText(): attaching arbitrary text to the AST as a #if declaration: text = { \r
Are there any lines of code that you would like to run either using a single thread at a time (hence, one thread after another), or using only one thread?(Y/N)\r
"
send -- "n\r"
expect -exact "n\r
Warning: attachArbitraryText(): attaching arbitrary text to the AST as a #if declaration: text = } \r
\r
Would you like to parallelize another loop?(Y/N)\r
"
send -- "n\r"
expect -exact "n\r
\r
Are you writing/printing anything from the parallelized region of the code?(Y/N) \r
"
send -- "n\r"
expect eof
